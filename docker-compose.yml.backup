version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: stock-tracker-mysql
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: stock_tracker_prod
      MYSQL_USER: stock_user
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./deployment/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3306:3306"
    networks:
      - stock-tracker-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: stock-tracker-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - stock-tracker-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      timeout: 3s
      retries: 5

  # Laravel Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: stock-tracker-app
    restart: unless-stopped
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_URL=${APP_URL}
      - APP_KEY=${APP_KEY}
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=stock_tracker_prod
      - DB_USERNAME=stock_user
      - DB_PASSWORD=${DB_PASSWORD}
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_PORT=6379
      - MAIL_MAILER=smtp
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_ENCRYPTION=${MAIL_ENCRYPTION}
      - MAIL_FROM_ADDRESS=${MAIL_FROM_ADDRESS}
      - MAIL_FROM_NAME=${MAIL_FROM_NAME}
    volumes:
      - app_data:/var/www/html/storage
      - app_logs:/var/www/html/storage/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - stock-tracker-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      timeout: 10s
      retries: 5

  # Nginx Web Server
  nginx:
    image: nginx:alpine
    container_name: stock-tracker-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./deployment/ssl:/etc/nginx/ssl
      - app_data:/var/www/html/storage
    depends_on:
      - app
    networks:
      - stock-tracker-network

  # Backup Service
  backup:
    image: alpine:latest
    container_name: stock-tracker-backup
    restart: "no"
    environment:
      - DB_HOST=mysql
      - DB_USER=stock_user
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=stock_tracker_prod
    volumes:
      - backup_data:/backups
      - ./deployment/backup.sh:/backup.sh
    depends_on:
      - mysql
    networks:
      - stock-tracker-network
    command: ["/bin/sh", "/backup.sh"]

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local
  app_logs:
    driver: local
  backup_data:
    driver: local

networks:
  stock-tracker-network:
    driver: bridge 